// Using Stacks O(n*k)  k --> for stack
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        
        if(heights.size() == 0) return 0;
        if(heights.size() == 1) return heights[0];
        
        stack<int> st;
        int ind = 0 , max_area = -1 , prev_top , area ;
        st.push(ind);
        ind++;
        while( ind < heights.size() )
        {
            area = -1;
            if(heights[st.top()] <= heights[ind] or st.empty() )   
                st.push(ind);
            else
            {   
                prev_top = -1;
                while(!st.empty() and heights[st.top()] > heights[ind])
                {
                    prev_top = st.top();
                    st.pop();
              
                    if(st.empty())
                        area = heights[prev_top]*( ind );
                    else
                        area = heights[prev_top]*( ind - st.top() - 1);
                    
                    max_area = max( area , max_area );
                }
                st.push(ind);
            }
            ind++;
        }
        while(!st.empty())
        {
            prev_top = st.top();
            st.pop();
            if(st.empty())
                area = heights[prev_top]*( ind );
            else
                area = heights[prev_top]*( ind - st.top() - 1);
            
            max_area = max( area , max_area );
        }
        int max_height = *max_element(heights.begin() , heights.end());
        max_area = max( max_height , max_area );
        
        return max_area;
    }
};
// Brute Force O(n^2)
for(int i=0;i<n;i++)
    {
        for(int l=i;heights[l]>=heights[i];l--)
            if(l<0) break;
        
        for(int r=i;heights[r]>=heights[i];r++)
            if(r>=n) break;
        
        area= heights[i]*(r-l-1);
        if(area>maxArea)
                maxArea=area;
    }
