class Solution {
public:
    
    void dfs(int vertex , map<int,int> &parent , vector<vector<int>>& connections , map<int,int> & vis , vector<vector<int>>& ans,int *disc , int *min_time , int &time)
    {
         vis[vertex] = 1;
         //vector<int> edges;
         disc[vertex] = min_time[vertex] = time;
         for(auto e : connections)
         {
             int u = 0;
             bool flag = 0;
             if(e[0] == vertex)
             {
                 flag = 1;
                 u = e[1];
             }
             else if(e[1] == vertex) 
             {
                 flag = 1;
                 u = e[0];
             }
             if(flag)
             {
                 if(vis[u] and parent[vertex] != u)
                     min_time[vertex] =  min( disc[u] , min_time[vertex]);
                 else if(!vis[u])
                 {
                     parent[u] = vertex;
                     time++;
                     dfs(u , parent , connections , vis , ans, disc, min_time , time);
                     min_time[vertex] =  min( min_time[u] , min_time[vertex]);
                     if( min_time[ u ] > disc[vertex])
                     {
                         vector<int> temp{vertex , u};
                         ans.push_back(temp);
                     }
                 }
                 flag = 0;
             }
         }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        map<int,int> parent ,vis;
        vector<vector<int>> ans;
        int *dis = new int[n];
        int *min_time =  new int[n];
        int time = 0;
        for(int vertex = 0 ; vertex < n ; vertex++)
        {
            if(!vis[vertex])
             dfs(vertex ,parent , connections ,vis , ans, dis , min_time , time);    
        }
        return ans;
    }
};

