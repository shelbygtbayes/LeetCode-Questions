// Memoization Approach
class Solution {
public:
    int backtrack(int index , string s , int dp[])
    {
        if(index == s.size()) return 1;
        else if(index > s.size()) return 0;
        if(dp[index] == -1)
        {
            if(s[index] > '2') 
                dp[index] = backtrack(index+1 , s , dp);
            else
            {
                if(s[index] == '1')                                                     //19 --> 19 , 1 9
                    dp[index] = backtrack(index+1 , s , dp) + backtrack(index+2 , s, dp);
                else if(s[index] == '2' and index+1 < s.size() and s[index+1] <= '6') // 25 --> 25 , 2 5
                    dp[index] = backtrack(index+1 , s, dp) + backtrack(index+2 , s, dp);
                else if(s[index] == '2')
                    dp[index] = backtrack(index+1 , s, dp);                                  // 29 --> 2 9 
                else                                                               // 0 --> NULL
                    dp[index] = 0;
            }
        }
        return dp[index];
    }
    int numDecodings(string s) {
        if(s.size() == 0) return 0;
        if(s.size() == 1) return s[0] != '0';
        int dp[s.size()];
        memset(dp,-1,sizeof(dp));
        return backtrack(0,s,dp);
    }
};


// Recurrsive Approach  TLE
class Solution {
public:
    int backtrack(int index , string s)
    {
        if(index == s.size()) return 1;
        if(s[index] > '2') 
            return backtrack(index+1 , s);
        else
        {
            if(s[index] == '1')                                                     //19 --> 19 , 1 9
                return backtrack(index+1 , s) + backtrack(index+2 , s);
            else if(s[index] == '2' and index+1 < s.size() and s[index+1] <= '6') // 25 --> 25 , 2 5
                return backtrack(index+1 , s) + backtrack(index+2 , s);
            else if(s[index] == '2')
                return backtrack(index+1 , s);                                  // 29 --> 2 9 
            else                                                               // 0 --> NULL
                return 0;
        }
    }
    int numDecodings(string s) {
        if(s.size() == 0) return 0;
        if(s.size() == 1) return s[0] != '0';
        return backtrack(0,s);
    }
};
