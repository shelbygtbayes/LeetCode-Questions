// O(n) Approach
#include<bits/stdc++.h>
using namespace std;
int main() {
	int n , val , ans = 0;
    cin >> n;
    unordered_map<int,int> bows;                          // Or Decreasing series By 1
    while(n--)
    {
        cin >> val;
        if( bows.find(val+1) != bows.end() )          // Checking Previous Height Diff by 1
        {
            bows[val+1] = bows[val+1] - 1;          // Decrease Count by 1 ( Since that bow for val+1 represented by the val)
            if(bows[val+1] == 0) 		               // Not Exists , Simply Erase
                bows.erase(val+1);
        }
        if( bows.find(val) != bows.end() )     // Checking It's Existence
            bows[val] = bows[val] + 1;		    //  Require 1 More bow
        else 							                   //   Create New series
            bows[val] = 1;
    }
    for(auto it = bows.begin() ; it!= bows.end() ; it++)
    {
        ans += (*it).second;
    }
    cout << ans;
	return 0;
}

// O(n^2)
#include<bits/stdc++.h>
using namespace std;
int main() {
    int n , temp;
    cin >> n;
    vector<int> arr;
    for(int i = 0 ; i < n ; i++)
    {
        cin >> temp;
        arr.push_back(temp);
    }
    int cnt = 0 , ans = 0;
    while(cnt < n)
    {
        priority_queue<int> pq(arr.begin(),arr.end());
        int h = pq.top();
        pq.pop();
        for(auto it = arr.begin() ; it != arr.end() ; it++)
        {
            if(*it == h)
            {
                *it = 0;
                h = h-1;
                cnt++;
            }
        }
        ans++;
    }
    cout << ans;
    return 0;
}
