class Solution {
public:
    void next(vector<vector<int>> &ans,vector<int>& nums,vector<int>& current,unordered_map<int,bool> &visited)
    {
        if(current.size()==nums.size())
        {
            ans.push_back(current);
            return;
        }
        for(int i=0;i<nums.size();i++)
        {
            if(!visited[i])
            {
                visited[i] = 1;
                current.push_back(nums[i]);
                next(ans,nums,current,visited);
                visited[i] = 0;
                current.pop_back();
                while(i+1<nums.size() && nums[i]==nums[i+1]) i++; // Modification to handle same elements
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> current;
        unordered_map<int,bool> visited;
        sort(nums.begin(),nums.end());
        next(ans,nums,current,visited);
        return ans;
    }
};
