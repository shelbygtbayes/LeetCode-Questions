//Approach 1 Using Heaps O(nLog(k)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        // Using Heaps
        // We require Min-Heaps as It saves the larger elements and remove minimum values from the top
        // of size 'k' to maintain top k elements
        if(k == 1) return *max_element(nums.begin(),nums.end());
        priority_queue<int , vector<int> , greater<int>> pq;
        for(auto e : nums)  // O(n)
        {
            pq.push(e);    // O(log(k))
            if(pq.size() > k) pq.pop();
        }
        // Now need to find the top ( As it will be Next smallest and kth largest)
        return pq.top();
    }
};
/*we have

3 2 1 5 6 4
     
Removing Minimum (R) when heap-size > k     
    Min-Heap :  
             3 2   --> 3 2
             3 2 1 --> 3 2  (R)
             3 2 5 --> 3 5  (R)
             3 5 6 --> 5 6  (R)
             5 6 4 --> 5 6  (R)
At last we have Top k largest elements
*/

// Approach 2
class Solution {
public:
    int partition(vector<int>& nums , int low , int high)
    {
        int ind_L = low-1 ;
        int pivot = nums[high];
        for(int ind_R = ind_L + 1 ; ind_R < high ; ind_R++)
        {
            if(nums[ind_R] <= pivot)
            {
                ind_L++;
                swap(nums[ind_L] , nums[ind_R]);
            }
        }
        // Final for Partition
        swap(nums[ind_L+1] , nums[high]);
        return ind_L+1;
    }
    int findKthLargest(vector<int>& nums, int k) {
        // Using Partitioning
        int low = 0 , n = nums.size() , high = n - 1;
        while(low <= high)
        {
            int pivot_index = partition(nums,low,high);
            int largest = n - pivot_index;
            if(largest == k) return nums[pivot_index];
            else if(largest > k) low = pivot_index+1;
            else high = pivot_index - 1;
        }
        return 0;
    }
};
/*
  3 2 1 5 4 6 4 7 4
         
         Consider two Partitions around Pivot
         1. Left  arr[1 ... Pivot-1]  --> Elements less than equal to Pivot element
         2. Right arr[pivot+1 ... n-1] --> greater elements
         
         Taking right as preference index
         so whenever we encounter a condition where arr[right] <= pivot 
                    then  we need to swap with the last+1 left element
                    +1 here to put the smaller element to new next position after last smaller 
         Now check the pivot element : If it's larger than required then Move to left side
                                       Else to the right side
         */
//
