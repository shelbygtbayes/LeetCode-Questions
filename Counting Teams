// O(N^2)
// Time:  O(n^2)
// Space: O(1)

class Solution {
public:
    int numTeams(vector<int>& rating) {
        if(rating.size() < 3) return 0;
        int result = 0;
        for (int i = 1; i < rating.size() - 1; ++i) {
            vector<int> less(2), greater(2);
            for (int j = 0; j < rating.size(); ++j) { // SCAN FULL ARRAY INCLUDING THE ABOVE ELEMENT
                if (rating[i] > rating[j]) // INCREASING
                {
                    if( i < j )
                        less[1]++; 
                    else
                        less[0]++;
                }
                if (rating[i] < rating[j]) //DECREASING
                {
                    if( i < j )
                        greater[1]++;
                    else
                        greater[0]++;
                }
            }
            result += less[0] * greater[1] + greater[0] * less[1];
        }
        return result;
    }
};

// Acceptable Brute Force O(N^3)
class Solution {
public:
    int numTeams(vector<int>& rating) {
        int ans = 0 , n = rating.size();
        if(n < 3) return 0;
        for(int i = 0 ; i < n-2 ; i++)
        {
            for(int j = i+1 ; j < n-1 ; j++)
            {
                if(rating[j] > rating[i])
                {
                    int prev = rating[j];
                    for(int k = j+1 ; k < n ; k++)
                    {
                        if(rating[k] > prev)
                        {
                            ans++;
                        }
                    }
                }
                if(rating[j] < rating[i])
                {
                    int prev = rating[j];
                    for(int k = j+1 ; k < n ; k++)
                    {
                        if(rating[k] < prev)
                        {
                            ans++;
                        }
                    }
                }
            }
        }
        return ans;
    }
};

// TLE Using set of vectors
class Solution {
public:
    int numTeams(vector<int>& rating) {
        int n = rating.size() , cnt = 0;
        if(n < 3) return 0;
        set< vector<int> > ans;
        for(int i = 1 ; i < n-1 ; i++)
        {
           
            int ind = 0;
            vector<int> I1 , D1 , I2 , D2;
            while(ind < i)
            {
                if(rating[ind] < rating[i])
                {
                   I1.push_back(rating[ind]);
                }
                else if(rating[ind] > rating[i])
                {
                    D1.push_back(rating[ind]);
                }
                ind++;
            }
            ind = i+1;
            if(I1.size() == 0 and D1.size() == 0) continue;
            while(ind < n)
            {
                if(rating[ind] > rating[i] and I1.size() > 0 )
                {
                    I2.push_back(rating[ind]);
                }
                else if(rating[ind] < rating[i] and D1.size() > 0)
                {
                    D2.push_back(rating[ind]);
                }
                ind++;
            }
            if(I2.size() > 0)
            {
                for(auto first : I1)
                {
                    int second = rating[i];
                    for(auto third : I2)
                    {
                        if(ans.find(vector<int>{first,second,third}) == ans.end() || ans.size() ==0 )
                            ans.insert(vector<int>{first,second,third});
                    }
                }
                
            }
            if(D2.size() > 0)
            {
                for(auto first : D1)
                {
                    int second = rating[i];
                    for(auto third : D2)
                    {
                        if(ans.find(vector<int>{first,second,third}) == ans.end() || ans.size() ==0 )
                            ans.insert(vector<int>{first,second,third});
                    }
                }
            }
        }
        cnt = ans.size();
        return cnt;
    }
};
