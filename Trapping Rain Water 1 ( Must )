Appraoch : 1

ans = 0
for i = 0 to n-1:
  left_max = max( H[0] , H[1] ,... , H[i] )
  right_max = max( H[i] , H[i+2] , .... , H[n-1] )
  water_trapped[i] = min( left_max , right_max ) - H[i]
  ans += water_trapped[i]

return ans

// O(n) Space Time

left_max[0] = H[0]; 
for (int i = 1; i < n; i++) 
        left_max[i] = max(left_max[i - 1], H[i]); 
    
right[n - 1] = H[n - 1]; 
for (int i = n - 2; i >= 0; i--) 
      right_max[i] = max(right_max[i + 1], H[i]);
  
for (int i = 0; i < n; i++) 
     water += min(left_max[i], right_max[i]) - H[i];
     
// O(1) space  2 Pointer 
// maximum element on left and right 
int left_max = 0, right_max = 0;   
 
int l = 0, r = n - 1; 
    while (l <= r) 
    { 
        if (H[l] < H[r]) 
        { 
            if (H[l] > left_max) 
                // update max in left 
                left_max = H[l]; 
            else
                // water on curr element = max - curr 
                result += left_max - H[l]; 
            l++; 
        } 
        else 
        { 
            if (H[r] > right_max) 
                // update right maximum 
                right_max = H[r]; 
            else
                result += right_max - H[r]; 
            r--; 
        } 
    }
 
  
