class FirstUnique {
public:
    list<int> q;
    unordered_map<int,int> vis;
    unordered_map<int,list<int>::iterator> pos;
    
    FirstUnique(vector<int>& nums) {
        for(auto n : nums)
        {
            if(!vis[n])
            {
                q.push_back(n);
                auto it = q.end();
                it--;
                pos[n] = it;
                vis[n] = 1;
            }
            else if(vis[n] == 1)
            {
                q.erase(pos[n]);
                vis[n] = -1;
            }
              
        }
    }
    
    int showFirstUnique() {
        if(q.size() == 0) return -1;
        else return q.front();
    }
    
    void add(int value) {
        if(!vis[value])
        {
            q.push_back(value);
            auto it = q.end();
            it--;
            pos[value] = it;
            vis[value] = 1;
        }
        else if(vis[value] == 1)
        {
            q.erase(pos[value]);
            vis[value] = -1;
        }
    }
};
//2 5 
/**
 * Your FirstUnique object will be instantiated and called as such:
 * FirstUnique* obj = new FirstUnique(nums);
 * int param_1 = obj->showFirstUnique();
 * obj->add(value);
 */
