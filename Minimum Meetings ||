// Approach 1 using Min-Heap
class solution
{
public:
  int minMeetingRooms(vector<vector<int>>& intervals) {
    priority_queue<int, vector<int> , greater<int> > pq;
    int ans = 1;
    for(auto interval : intervals)
    {
      while(!pq.empty() and pq.top() > interval[0] ) pq.pop();
      pq.push(interval[1]);
      ans = max(ans , pq.size());
    }
    return ans;
  }
};

// Approach 2 using Hashing
class solution
{
public:
  int minMeetingRooms(vector<vector<int>>& intervals) {
    unordered_map<int,int> room;
    int ans = 1;
    for(auto interval : intervals)
    {
      room[interval[0]]++;   // Room occupied
      room[interval[1]]--;  //  Room free
    }
    // Need to return Max value
    int cnt = 0 ;
    for(auto it = room.begin() ; it != room.end() ; it++)
    { 
      cnt += it.second;
      ans = max(ans , cnt);
    }
    return ans;
  }
};


