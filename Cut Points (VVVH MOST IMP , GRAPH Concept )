/*Appraoch
Requirements : Discovery Time ( Time First Visited ) ,  Minimum Time or Low Time ( Describing the another shorter path availibility) , Parent 
              No of Child : Required for root case only , Visited Map
O/p : int AP[] // Whether index 'i' is Articulation Point or not 

Cases :
1) If root has 2 independent child ( No edge between it's children ) , then AP[root] = true
2) If edge u -- v and min_time[u] >= disc[vertex] then AP[ vertex ] = true 
It states there must be another path which connects u to vertex ( or a Point for cycle or an Back edge existence)
*/
// Representing Graph as Matrix
#include<iostream>
#include<map>
#include<vector>
using namespace std;
void dfs(int **graph , map<int,bool> & AP , map<int,bool> & vis , int vertex , int disc[] , int min_time[] , int n , int &time , map<int , int> & parent)
{
    disc[vertex] = min_time[vertex] = time;
    vis[vertex] = 1;
    int child = 0;
    for(int u = 0 ; u < n ; u++)
    {
        if(graph[vertex][u] == 1)
        {
            if(!vis[u])
            {
                child += 1;
                parent[u] = vertex;
                time++;
                dfs(graph , AP , vis , u , disc , min_time , n , time , parent);
                min_time[vertex] = min(min_time[u] , min_time[vertex]);                                      // Update the Min_time Always
                if(parent[vertex] == -1 and child > 1) // ROOT Case 1
                {
                    AP[vertex] = 1;
                }                                
                else if(parent[vertex] != -1 and min_time[u] >= disc[vertex]) // Back Edge Presence
                {
                     AP[vertex] = 1;        //       Case 2
                }
            }
            else if(parent[vertex] != u) // If visited then Update if Different Parent
            {
                min_time[vertex] = min(min_time[u] , disc[vertex]);
            }
        }
    } 
}
vector<int> func(int n , int m , vector<vector<int>> edges)
{
    int **graph = new int*[n];
    for(int u = 0 ; u < n ; u++)
    {
        graph[u] = new int[n];
        for(int v = 0 ; v < n ; v++)
        {
            graph[u][v] = 0;
        }
    }
    // Building Graph
    vector<int> ans;
    for(auto e : edges)
    {
        int u = e[0] , v = e[1];
        graph[u][v] = 1;
        graph[v][u] = 1;
    }
    map<int,bool>  AP ,  vis ;
    map<int,int> parent;
    int time = 0; 
    int disc[n] = {0};
    int min_time[n] = {0};
    for(int vertex = 0 ; vertex < n ; vertex++)
    {
        if(!vis[ vertex ])
        {   
            parent[vertex] = -1;
            dfs(graph ,  AP ,  vis , vertex , disc, min_time, n , time, parent);
        }
    }
    for(auto it = AP.begin() ; it != AP.end() ;  it++)
    {
        if((*it).second == 1)
            ans.push_back((*it).first);
    }
    return ans;
}
int main()
{
    int n  = 7, m = 7;
    vector<vector<int>> edges{
        {0, 1},
        {0, 2}, 
        {1, 3}, 
        {2, 3}, 
        {2, 5}, 
        {5, 6}, 
        {3, 4}
    }; 
    vector<int> ans = func(n,m,edges);
    for(auto i : ans)
        cout << i <<" ";
    return 0;
}
