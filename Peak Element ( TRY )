class Solution {
public:
    bool func(int _ind,vector<int>& nums)
    {
        int n = nums.size();
        if(_ind == 0 and nums[0] > nums[1]) return true;
        else if(_ind == n-1 and nums[n-1] > nums[n-2]) return true;
        else if( nums[_ind] > nums[_ind+1] and nums[_ind] > nums[_ind-1]) return true;
        else return false;
    }
    int func_peak(int st , int end , vector<int>& nums)
    {
        if(st <= end)
        {
            int mid = st + (end-st)/2;
            if(mid==0) return (nums[0] > nums[1])?(0):(-1);
            else if(mid == nums.size()-1) return (nums[nums.size()-1] > nums[nums.size()-2])?(nums.size()-1):(-1);
            if(func(mid,nums)) return mid;
            else return max(func_peak(0,mid-1,nums) ,func_peak(mid+1,end,nums));  
        }
        return -1;
    }
    int findPeakElement(vector<int>& nums) {
        int st = 0 , end = nums.size()-1 , ans = -1;
        if(end == 0) return 0;
        ans = func_peak(st,end,nums);
        if(ans == -1 and nums[0] > nums[1]) ans = 0;
        if(ans == -1 and nums[end] > nums[end-1]) ans =  end;
        return ans;
    }
};
