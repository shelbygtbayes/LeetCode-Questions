class Solution {
public:
    bool canPartition(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int Total_sum = accumulate(nums.begin(),nums.end(),0);
        // According to the question
        if(Total_sum%2) return false;
        else if(Total_sum == 0) return true;
        
        int n = nums.size();
        // Max Possible sum of each subset = Total_sum/2
        bool dp[Total_sum/2 + 1][n+1];
        // Always a possible way to get sum of subset = 0
        for(int i=0;i<=n;i++)
            dp[0][i] = 1;
        // Always not a way to get Positive sum without using any elements
        for(int sum = 1; sum <= Total_sum/2 ; sum++) 
            dp[sum][0] = 0;
        
        for(int sum = 1; sum <= Total_sum/2 ; sum++)
        {
            for(int ind = 1; ind <= n; ind++)
            {
                // Without including the nums[ind-1]
                dp[sum][ind] = dp[sum][ind-1];
                if(sum >= nums[ind-1])
                    dp[sum][ind] = dp[sum][ind] || dp[sum-nums[ind-1]][ind-1];
                // If possible to get sum - nums[ind-1]
                // then we can get sum using nums[ind-1]
            }
        }
        return dp[Total_sum/2][n];
    }
};
